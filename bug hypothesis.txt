Platform Specificity: It failed on Android but not iOS, which immediately suggested a difference in timing or how the OS handles network data.
The Log Message: The raw buffer 7E0A...7F7E0A... was the "smoking gun." It clearly showed one complete frame followed immediately by the start of a second frame. This indicated that Android was batching data from two separate transmissions into a single chunk.
"Loses Sync": This pointed to a state management problem. The parser's internal buffer was likely not being cleared correctly, causing errors on subsequent calls.
Form a Hypothesis: My initial hypothesis was that the
extractFrames()
 loop was flawed. I suspected that after parsing one valid frame, it was exiting immediately instead of continuing to process the rest of the buffer, leaving the partial second frame to cause problems later.
Verify with Code: I then examined the
vdp_parser.cpp
c:/Users/prane/CLionProjects/VDPFrameParser/VDPFrameParser/src/vdp_parser.cpp
 source code, specifically the
extractFrames
c:/Users/prane/CLionProjects/VDPFrameParser/VDPFrameParser/src/vdp_parser.cpp
 method. This is where I had the "aha!" moment. I saw the while (true) loop and the continue statements, which proved my initial hypothesis was wrong. The loop was designed to handle multiple frames.
Identify the True Root Cause: By reading the code carefully, I found the real reason for the behavior. When the parser sees the start of a frame but doesn't have enough bytes to complete it (as per the frame's own length field), it correctly executes a break statement. This is the correct behavior for a streaming parserâ€”it preserves the partial frame and waits for more data. The bug wasn't in the parser; it was in how the client was using the parser. The client was not respecting the parser's need to accumulate data over multiple
feed
 calls.
Propose the Solution: Since the C++ code was correct, the solution was to provide clear guidance to the mobile team. I updated
parsing_bug.md
 to explain why the parser was behaving as it was (streaming, stateful design) and provided corrected pseudocode showing the right way to use it:
Create one persistent parser instance.
Continuously
feed()
 it all incoming data from the network.
Call
extractFrames()
c:/Users/prane/CLionProjects/VDPFrameParser/VDPFrameParser/src/vdp_parser.cpp
 after every
feed
 to pull out any frames that have been completed.